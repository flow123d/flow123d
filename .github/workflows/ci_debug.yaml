name: Flow123d debug CI

on:
  pull_request:
    branches: 
      - "**"
  # !! workflow_dispatch configuration must be in the default branch, i.e. 'master'
  workflow_dispatch:
    inputs:
      environment:
        description: Build environment [gnu, intel].
        type: choice
        options:
          - gnu
          - intel
        required: false
        default: gnu
env:
  autopull: 0
  artifact-dir: build-dir
permissions:
  contents: read
  actions: read
  checks: write
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-ci-debug
  cancel-in-progress: true
jobs:
  create-env:
    name: Create environments
    runs-on: ubuntu-latest
    outputs:
      build-dir: ${{ steps.vars.outputs.build-dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set variables
        id: vars
        run: |            
          git-branch=`git rev-parse --abbrev-ref HEAD`
          build-dir=build-${git-branch}

          echo "build-dir=${build-dir}" >> $GITHUB_OUTPUT

      - name: Check vars
        run: |
          echo build-dir="${{ steps.vars.outputs.build-dir }}"      

  build:
    name: Flow123d debug main build
    runs-on: ubuntu-latest
    needs:
      - create-env
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build flow123d, verify, tarball.
      run: config/build/auto_build.sh dbg gnu ci $(cat version)

    - name: Benchmark meshes
      run: config/build/create_unit_test_meshes.sh ${{ needs.create-env.outputs.build-dir }}/benchmark_meshes

    - name: Tarball build dir
      run: config/build/tar_build_dir.sh ${{ needs.create-env.outputs.build-dir }}        
      
    - uses: actions/upload-artifact@v4
      with:         
        name: ${{ env.artifact-dir }}
        path: build-dir.tar
  
  integration-tests:
    name: Integration Test ${{ matrix.test_dir }}
    runs-on: ubuntu-latest
    needs: 
      - build
    continue-on-error: True
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        test_dir:
        - 01_cmd_line
        - 02_generic_input
        - 03_generic_output
        - 04_generic_mesh
        - 05_tutorial
        - 06_errors
        - 10_darcy
        - 11_darcy_bc
        - 12_darcy_frac
        - 13_darcy_time
        - 14_darcy_richards
        - 20_solute_fv
        - 21_solute_fv_frac
        - 22_solute_fv_time
        - 24_solute_dg
        - 25_solute_dg_bc
        - 26_solute_dg_frac
        - 27_solute_dg_time
        - 30_sorption
        - 31_dual_por
        - 32_decay
        - 33_reaction
        - 34_sorption_dg
        - 40_heat
        - 50_mechanics
    steps:  
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build dir
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact-dir }}

      - name: Run integration tests
        run: config/build/run_with_build_dir.sh dbg_gnu tests/runtest tests/${{matrix.test_dir}}  --keep-going --batch

      - name: Report
        run: | 
          echo "Job status: ${{ job.status }}"

  unit-tests:
    name: Unit Test ${{matrix.test_dir}}
    runs-on: ubuntu-latest
    needs: 
      - build
    continue-on-error: True
    outputs:
      status: ${{ job.status }}       
    strategy:
      matrix:
        test_dir:
        - coupling
        - fem
        - fields
        - flow
        - input
        - intersection
        - la
        - mesh
        - output
        - scripts
        - system
        - test_scripts
        - tools
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build dir
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact-dir }}

      - name: Run UNIT tests
        id: unit-test
        run: config/build/run_with_build_dir.sh dbg_gnu make -C build_tree/unit_tests/${{matrix.test_dir}} -k all-test

      - name: Report tests
        if: ${{ steps.unit-test.outcome == 'failure' }}
        uses: dorny/test-reporter@v1
        id: test-reporter
        with:
          name: Reports of unit test
          path:  unit_tests/**/*.xml
          reporter: java-junit
          fail-on-error: true                
          fail-on-empty: true
          list-suites: failed
          list-tests: failed
          only-summary: true

  build-doc:
    name: Test build doc
    runs-on: ubuntu-latest
    continue-on-error: True
    needs: 
      - build
    outputs:
        status: ${{ job.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download build dir
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact-dir }}
      - name: Build documentation
        run: config/build/run_with_build_dir.sh  dbg_gnu make ref-doc
                     
  #conclusion:
  #  if: ${{always()}}
  #  runs-on: ubuntu-latest
  #  name: Workflow conclusion from all job results 
  #  
  #  #needs: [integration_tests, unit_tests, build_doc]        
  #  needs: [build-doc, unit-tests, integration-tests]
  #  
  #  # continue-on-error jobs always reports sucess to the workflow
  #  steps:
  #    - name: Install gh command
  #      # Fixed on the last workflow update. Works but seems fragile.
  #      # But so prooved to be the previous solution:
  #      # sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
  #      # sudo apt-add-repository https://cli.github.com/packages
  #      run: |
  #          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
  #          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
  #            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
  #            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
  #            && sudo apt update \
  #            && sudo apt install gh -y
  #    - name: Check status of all jobs
  #      env:
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #      run: |
  #          echo "run_id: ${{ github.run_id }}"
  #          echo "run_number: ${{ github.run_number }}"
  #          echo "run_attempt: ${{ github.run_attempt }}"
  #          
  #          # get the status of jobs selected by name:
  #          #statuses=$(gh api "repos/flow123d/flow123d/actions/runs/${run_id}/jobs" --jq '.jobs[] | select(.name startswith("Integration"))  | .conclusion')
  #          
  #          # get the status of all jobs
  #          statuses=$(gh api "repos/flow123d/flow123d/actions/runs/${{ github.run_id }}/jobs" --jq '.jobs[].conclusion')
  #
  #          # check if any job has failed
  #          if echo "$statuses" | grep -q failure; then
  #              echo "One or more jobs have failed"
  #              exit 1
  #          else
  #              echo "All jobs have succeeded"
  #          fi    

# steps.xyz.outcome  ... The result before continue-on-error is applied. Possible values: success, failure, cancelled, skipped.
# steps.xyz.conclusion .. The result after continue-on-error is applied. Always success for continue-on-error.
# "${{ job.status }}" ?? status of actual job 
# ${{needs.<job-id>.result}}
# ${{needs.<job-id>.outpus.<output-id>}} ... does not add the job to needs list automatically !!

# problem is how to integrate the result over the whole job matrix
# proposed solution: https://github.com/orgs/community/discussions/26822
# uses `if: ${{always()}}` for the conclusion job which should run the job multiple times
