name: CI build, tests and alpha release of images and packages
# Build the ci-<env>:<version>_<commit> image and CI packages on SHARE/docker-images/<version>_<commit>
# Triggered on push to specified branches.

on: 
    push:
        branches:
        - master
        - JB_shared_system
        - JB_release_tests        
        - 3.9.1
        - DF_variant_benchmark_asm
        - DF_asm_optimization

    # !! workflow_dispatch configuration must be in the default branch, i.e. 'master'
    # can also start manually on any branch
    workflow_dispatch:
        inputs:
            environment:
                description: Build environment [gnu, intel].
                type: choice
                options:
                    - gnu
                    - intel
                required: false
                default: gnu



env:
  DOCKER_USER: ${{secrets.DOCKER_HUB_FLOW123D_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_HUB_FLOW123D_TOKEN}}
  environment: gnu
  
jobs:
    build:
        runs-on: ubuntu-latest
        name: Flow123d release main build
        steps:
        - name: Checkout
          uses: actions/checkout@v2
    
        - name: Set variables
          id: vars
          run: |
            git_commit=`git rev-parse --short=6 HEAD`
            release_tag=`cat version`_${git_commit}
            echo ${release_tag}

            # create build_dir variable
            git_branch=`git rev-parse --abbrev-ref HEAD`
            build_dir=build-${git_branch}
            echo ${build_dir}
    
            # can not use environment variables in github actions
            echo "pubdir=publish_${environment}" >> $GITHUB_OUTPUT
            echo "reltag=${release_tag}" >> $GITHUB_OUTPUT
            echo "builddir=${build_dir}" >> $GITHUB_OUTPUT

        - name: Check vars
          run: |
              echo pubdir="${{ steps.vars.outputs.pubdir }}"
              echo reltag="${{ steps.vars.outputs.reltag }}"
              echo builddir="${{ steps.vars.outputs.builddir }}"

        - name: Build Flow123d
          run: |
              release_tag="${{ steps.vars.outputs.reltag }}"
              # auto_build.sh <build_type> <environment> <image_name_base> <release_tag>               
              config/build/auto_build.sh rel ${environment} ci ${release_tag}

        - name: Benchmark meshes
          run: |
              build_dir="${{ steps.vars.outputs.builddir }}"
              echo "Benchmark meshes build_dir="${build_dir}
              bin/create_meshes.sh

        - name: Tarball build dir
          run: |
              build_dir="${{ steps.vars.outputs.builddir }}"
              config/build/tar_build_dir.sh ${build_dir}              
        - uses: actions/upload-artifact@v3
          with:         
            name: build_dir
            path: build_dir.tar   

 
    packages:
        name: Images and installation packages
        needs: [build]
        runs-on: ubuntu-latest
        continue-on-error: True
        outputs:
            status: ${{job.status}}

        steps:
        - uses: actions/checkout@v3
        - uses: actions/download-artifact@v3
          with:
            name: build_dir

        - name: Set variables
          id: vars
          run: |
            git_commit=`git rev-parse --short=6 HEAD`
            release_tag=`cat version`_${git_commit}
            echo ${release_tag}

            # can not use environment variables in github actions
            echo "pubdir=publish_${environment}" >> $GITHUB_OUTPUT
            echo "reltag=${release_tag}" >> $GITHUB_OUTPUT

        - name: Check vars
          run: |
              echo pubdir="${{ steps.vars.outputs.pubdir }}"
              echo reltag="${{ steps.vars.outputs.reltag }}"

        - name: Login for finall push to docker hub
          run: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            release_tag="${{ steps.vars.outputs.reltag }}"
            config/build/make_packages.sh ${environment} ci ${release_tag} push

        - name: Prepare integration test image
          run: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            release_tag="${{ steps.vars.outputs.reltag }}"
            config/build/make_integration_test_image.sh ${environment} ${release_tag} push
    
        - name: upload artifacts
          uses: actions/upload-artifact@v3
          with:       
            path: |
                ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.reltag }}_doc.pdf 
                ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.reltag }}_linux_install.json 
                ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.reltag }}_linux_install.tar.gz 
                ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.reltag }}_windows_install.exe 
                ${{ steps.vars.outputs.pubdir }}/flow123d_${{ steps.vars.outputs.reltag }}_windows_install.json 
      
        - name: SCP upload to Share
          run: |
            release_tag="${{ steps.vars.outputs.reltag }}"
            publish_dir="${{ steps.vars.outputs.pubdir }}"
            config/build/ssh_upload.sh ${publish_dir} ci-packages/${release_tag} \
            ${{ secrets.PUBLISH_USER }}@${{ secrets.PUBLISH_HOST }} ${{ secrets.PUBLISH_PASS }}

    # Run unit tests with release build, similar to the debug build
    unit_tests:
        needs: [build]
        runs-on: ubuntu-latest
        name: Unit Test 
        continue-on-error: True
        outputs:
            status: ${{job.status}}        
        strategy:
          matrix:
            test_dir:
            - coupling
            - fem
            - fields
            - flow
            - input
            - intersection
            - la
            - mesh
            - output
            - scripts
            - system
            - test_scripts
            - tools
        steps:  
        - uses: actions/checkout@v3
        - uses: actions/download-artifact@v3
          with:
            name: build_dir
        - run: config/build/run_with_build_dir.sh rel_gnu make -C build_tree/unit_tests/${{matrix.test_dir}} -k all-test

    benchmarks:
        needs: [build]
        runs-on: ubuntu-latest
        name: Benchmarks 
        continue-on-error: True
        outputs:
            status: ${{job.status}}        
        strategy:
          matrix:
            test:
            # unit_test_subdir,   target in the subdir,   processing notebook in src/python/notebooks
            - {dir: coupling, target: dg_asm, notebook: dg_asm_plots }
            #- {dir: fem, target: fem_tools}
        steps:  
        - uses: actions/checkout@v3
        - uses: actions/download-artifact@v3
          with:
            name: build_dir
        - name: Set variables
          id: vars
          run: |
            git_commit=`git rev-parse --short=6 HEAD`

            # create build_dir variable
            git_branch=`git rev-parse --abbrev-ref HEAD`
            build_dir=build-${git_branch}

            # can not use environment variables in github actions
            echo "dev_version=${git_branch}_${git_commit}" >>$GITHUB_OUTPUT 
            echo "git_commit=${git_commit}" >> $GITHUB_OUTPUT
            echo "builddir=${build_dir}" >> $GITHUB_OUTPUT
        - name: Check vars
          run: |
              echo git_commit="${{ steps.vars.outputs.git_commit }}"
              echo builddir="${{ steps.vars.outputs.builddir }}"
        - name: Run Benchmark
          run: |              
              config/build/run_with_build_dir.sh rel_gnu make -C build_tree/unit_tests/${{matrix.test.dir}} -k ${{matrix.test.target}}_bench_bin
              config/build/run_with_build_dir.sh -c rel_gnu bin/run_benchmark.sh -t=3600 -np=1 -nr=4 ${{matrix.test.dir}}/${{matrix.test.target}} 
              ls build_tree/unit_tests/${{matrix.test.dir}}    

        - name: "Upload Artifacts: profiler results"
          uses: actions/upload-artifact@v3
          with:     
            name: ${{matrix.test.target}}
            path: |
                build_tree/unit_tests/${{matrix.test.dir}}/${{matrix.test.target}}-1-bench_profiler_*.json

        - name: Run postprocessing notebook
          run: |
            cd src/python/notebooks
            pip install nbconvert jupyter papermill -r requirements.txt
            git_branch=`git rev-parse --abbrev-ref HEAD`
            build_dir=build-${git_branch}
            papermill ${{matrix.test.notebook}}.ipynb ${{matrix.test.notebook}}_out.ipynb -p profiler_files "../../../${build_dir}/unit_tests/${{matrix.test.dir}}/${{matrix.test.target}}-1-bench_profiler_*.json"
            jupyter nbconvert --to html --execute ${{matrix.test.notebook}}_out.ipynb --output-dir public            
        - name: GitHub Pages action
          uses: peaceiris/actions-gh-pages@v3.6.1
          with:
              github_token: ${{ secrets.GITHUB_TOKEN }}
              publish_dir: ./src/python/notebooks/public   
              commit_message: "Benchmark ${{matrix.test.target}}, ${{steps.vars.outputs.dev_version}}"

    integration_tests:
        needs: [packages]
        runs-on: ubuntu-latest
        name: Integration Test ${{matrix.test_dir}}
        continue-on-error: True
        outputs:
            status: ${{job.status}}
        strategy:
          matrix:
            test_dir:
            - 01_cmd_line
            - 02_generic_input
            - 03_generic_output
            - 04_generic_mesh
            - 05_tutorial
            - 06_errors
            - 10_darcy
            - 11_darcy_bc
            - 12_darcy_frac
            - 13_darcy_time
            - 14_darcy_richards
            - 20_solute_fv
            - 21_solute_fv_frac
            - 22_solute_fv_time
            - 24_solute_dg
            - 25_solute_dg_bc
            - 26_solute_dg_frac
            - 27_solute_dg_time
            - 30_sorption
            - 31_dual_por
            - 32_decay
            - 33_reaction
            - 34_sorption_dg
            - 40_heat
            - 50_mechanics

        steps:  
        - uses: actions/checkout@v3

        - name: Set variables
          id: vars
          run: |
            git_commit=`git rev-parse --short=6 HEAD`
            release_tag=`cat version`_${git_commit}

            echo "reltag=${release_tag}" >> $GITHUB_OUTPUT

        - name: Check vars
          run: |
              echo reltag="${{ steps.vars.outputs.reltag }}"

        - name: Run integration tests
          run: | 
            release_tag="${{ steps.vars.outputs.reltag }}"
            config/build/run_tests_with_it_image.sh ${environment} ${release_tag} ./runtest tests/${{matrix.test_dir}} --keep-going --batch

        - name: Report
          run: |
            echo "Job result: ${{job.result}}"
            echo "Job status: ${{job.status}}"

    conclusion:
        if: ${{always()}}
        runs-on: ubuntu-latest
        name: Workflow conclusion from all job results   
        needs: [packages, unit_tests, integration_tests]
        
        # continue-on-error jobs always reports sucess to the workflow
        steps:
          - name: Install gh command
            run: |
                type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
                curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
                  && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
                  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
                  && sudo apt update \
                  && sudo apt install gh -y
          - name: Check status of all jobs
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: |
                echo "run_id: ${{ github.run_id }}"
                echo "run_number: ${{ github.run_number }}"
                echo "run_attempt: ${{ github.run_attempt }}"
                
                # get the status of jobs selected by name:
                statuses=$(gh api "repos/flow123d/flow123d/actions/runs/${{ github.run_id }}/jobs" --jq '.jobs[] | select(.name | startswith("Integration")) | .conclusion')
                
                # get the status of all jobs
                statuses=$(gh api "repos/flow123d/flow123d/actions/runs/${{ github.run_id }}/jobs" --jq '.jobs[].conclusion')

                # check if any job has failed
                if echo "$statuses" | grep -q failure; then
                    echo "One or more jobs have failed"
                    exit 1
                else
                    echo "All jobs have succeeded"
                fi
