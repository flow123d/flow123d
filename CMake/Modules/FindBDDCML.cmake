# Find BDDCML library
# - Balancing domain decomposition by constrains - multilevel (developed by Jakub Sistek)
# Input: BDDCML_ROOT
#
# Output:
# BDDCML_INCLUDES - where to find header files
# BDDCML_LIBRARIES - Link sequence of bddcml libraries and other libraries linked by bddcml.
# BDDCML_FOUND - True if FFTW found.


########################################################## 
# Use package multipass to alow multiple tries when search for BDDCML
##########################################################
include (FindPackageMultipass)
find_package_multipass (BDDCML bddcml_config_current
  STATES ROOT
  DEPENDENTS LAST_ROOT INCLUDES LIBRARIES FOUND)

#if (BDDCML_INCLUDES)
  # Already in cache, be silent
#  set (BDDCML_FIND_QUIETLY TRUE)
#endif()

message(STATUS "BDDCML_ROOT: ${BDDCML_ROOT}")

find_path (BDDCML_INCLUDES bddcml_interface_c.h  HINTS ${BDDCML_ROOT}/src )
find_library (BDDCML_LIBRARY NAMES bddcml  HINTS ${BDDCML_ROOT}/lib )

if (BDDCML_INCLUDES AND BDDCML_LIBRARY)
  message(STATUS "found: ${BDDCML_INCLUDES}, ${BDDCML_LIBRARY} ")
  set(BDDCML_LAST_ROOT ${BDDCML_ROOT} CACHE FILEPATH "_Clearad_") 
  #string(REPLACE REGEX "/src$" "" BDDCML_ROOT ${BDDCML_INCLUDES})
  find_program (MAKE_EXECUTABLE NAMES make gmake)

  if (EXISTS ${BDDCML_LAST_ROOT}/make.inc)
    # use make.inc to get whole link sequence
    # A temporary makefile to probe make.inc
    set (config_makefile "${PROJECT_BINARY_DIR}/Makefile.bddcml")
    file (WRITE "${config_makefile}"
"## This file was autogenerated by FindBDDCML.cmake
include ${BDDCML_LAST_ROOT}/make.inc

show :
\t-@echo -n \${\${VARIABLE}}
")


    ######################################
    macro (BDDCML_GET_VARIABLE name var)
      set (${var} "${var}_NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
      execute_process (COMMAND ${MAKE_EXECUTABLE} --no-print-directory -f ${config_makefile} show VARIABLE=${name}
        OUTPUT_VARIABLE ${var}
        RESULT_VARIABLE make_return)
      message(STATUS " exporting ${name} into cmake variable ${var} =  " ${${var}} )
    endmacro (BDDCML_GET_VARIABLE)

    bddcml_get_variable("BDDCML_LINK_SEQUENCE" BDDCML_LINK_SEQ)
    bddcml_get_variable("BDDCML_CDEFS" BDDCML_CDEFS)
    bddcml_get_variable("BDDCML_INC" BDDCML_INC)
    STRING(REGEX REPLACE "( |^)-I" ";"  BDDCML_INC_DIRS ${BDDCML_INC})
    #message(STATUS ${BDDCML_INC_DIRS})
    #STRING(REGEX REPLACE " *" ";"  BDDCML_INC_LIST ${BDDCML_INC_DIRS}) 
    set(BDDCML_INCLUDES ${BDDCML_INCLUDES} ${BDDCML_INC_DIRS})
    
  
    #message(STATUS "BDDCML_LIBS: ${BDDCML_LINK_SEQ}")
    #message(STATUS "BDDCML_CDEFS: ${BDDCML_CDEFS}")

    #file (REMOVE ${config_makefile})
  elseif()
    set(BDDCML_INCLUDES "")
    set(BDDCML_LIBRARY "")
  endif()  
endif()  



include (ResolveCompilerPaths)
# Extract include paths and libraries from compile command line
resolve_LIBRARIES(BDDCML_LIBS "${BDDCML_LINK_SEQ}")
# Extract BLOPEX object files 
STRING(REGEX MATCHALL "[^ ]*\\.o" BLOPEX_OBJS "${BDDCML_LINK_SEQ}")
message(STATUS "BOBJ: ${BLOPEX_OBJS}")
#STRING(REGEX REPLACE <regular_expression>  <replace_expression> <output variable>  <input> [<input>...])
# ATTENTION: input has to be quoted otherwise it interprets contens of variable, in particular run REGEX on every item in ; separated list
STRING(REGEX REPLACE "([^;]*BLOPEX\\.a)" "${BLOPEX_OBJS};\\1" BDDCML_LIBRARIES "${BDDCML_LIBS}" )
#STRING(REGEX MATCH "[^;]*BLOPEX\\.a"  BDDCML_BLOPEX_LIB "${BDDCML_LIBS}" )
#STRING(REGEX MATCH "[^;]"  BDDCML_BEGIN_LIB ${BDDCML_LIBS} )
message(STATUS "out: ${BDDCML_LIBRARIES}")
#message(STATUS "out: ${BDDCML_BLOPEX_LIB}")
message(STATUS "in: ${BDDCML_LIBS}")


message(STATUS "found: ${BDDCML_INCLUDES}, ${BDDCML_LIBRARIES}")


# handle the QUIETLY and REQUIRED arguments and set FFTW_FOUND to TRUE if
# all listed variables are TRUE
include (FindPackageHandleStandardArgs)
find_package_handle_standard_args (BDDCML DEFAULT_MSG BDDCML_LIBRARIES BDDCML_INCLUDES)

mark_as_advanced (BDDCML_LIBRARIES BDDCML_INCLUDES)



