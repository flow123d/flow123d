### PETSC library ###################################################################
# The Flow123 requires PETSC library (3.4.x), you have to set 
# the location of PETSC and used PETSC architecture unless you
# would to use system wide settings.
# e.g.
#set(PETSC_DIR "$ENV{HOME}/local/petsc")
#set(PETSC_ARCH "linux-gcc-dbg")

# If PETSC are found but do not compile, it is probably due to some undefined references (usually nonstandard compiler libraries)
# see file: BUILD_DIR/CMakeFiles/CMakeError.log 
# and set following variable to add missing libraries using -L and -l parameters.
#
# e.g. Some PETSC installations have missing pthread library. So we use (assuming libpthread.a placed in /usr/lib):
# set( PETSC_ADDITIONAL_LIBS "-lpthread")

# If PETSC are not found we try to install them automatically.
# Options for PETSC installer:
#
#     PETSC_INSTALL_MPI_DIR      - pass MPI to PETSC configure 
#     PETSC_INSTALL_LAPACK_DIR   - pass Lapack to PETSC configure
#
#     PETSC_INSTALL_CONFIG - possible values:
#       mini             - only petsc + necessary MPI, BLAS, LAPACK
#       flow123d_mini    - mini + metis + parmetis
#       bddcml           - flow123d_mini + mumps + scalapack + blacs
#       full             - bddcml + hypre + blopex + umfpack + sundials
#
#     PETSC_INSTALL_OPTIONS - additional options used as parameters to configure.py,
#
# example:
# set(PETSC_INSTALL_CONFIG "bddcml")
# set(PETSC_INSTALL_OPTIONS "--download-hypre=yes")




### BDDCML library #############################################################
# BDDCML_ROOT - root directory of BDDCML library
# tested with version 2.2
# If BDDCML_ROOT is set and BDDCML library is not found it is installed automatically.
# If the variable is unset, BDDCML is not used.
# Note: For automatic installation you need MUMPS and ScaLapack, this can be automatically installed with PETSC 
# if you set PETSC_CONFIG=bddcml.
#
# example:
# set(BDDCML_ROOT "$(HOME)/local/BDDCML/bddcml-2.2")

### Python setting ###############################################################
# USE_PYTHON - only use python if this is set to "yes"
# We add python library only on explicit request since it leads to tons of errors when debugging with valgrind.
#
# set(USE_PYTHON "yes")

### Boost ######################
# Boost_FORCE_REBUILD - if set, force to build Boost even if there are some in the system
#
#set(Boost_FORCE_REBUILD "yes")

### Install Prefix ########################
#
# Root directory of Flow123d installation. Default is ${HOME}/local/Flow123d for Linux and
# C:\Program Files\Flow123d for Windows.
#
# set(CMAKE_INSTALL_PREFIX "${HOME}/flow123d"



### Build setting ####################################################################

### verbose mode ####
# option to produce more verbose compiling
# for the same result you can call make with VERBOSE=1
# e.g.
# make VERBOSE=1 all

#set(CMAKE_VERBOSE_MAKEFILE on)


### set compiler ###
# g++ is automatically detected and used
# 
# Clang can not be used without some modifications in Armadillo.
# It is worth to try.
# set( CMAKE_CXX_COMPILER "clang++")


### USING CCACHE ###
# If you have installed 'ccache' package, you can enjoy faster builds by setting 
# variable CCACHE_CXX_COMPILER to "ccache __your_favourite_c++_compiler__".
# The helper script is created in the build directory.
#
# ccache works even if you use "make clean-all" command (that's the main advantage).
# Just the first time build with ccache is slower.
# To clean the ccache files, use command: 
# $ ccache -C
# More info and download at: http://ccache.samba.org/
#
# set (CCACHE_CXX_COMPILER "ccache /usr/bin/c++")


### Compiler flags  ####
# There are two predefined configurations: "debug" and "release"
# "debug" set flags: "-g -DFlow123d_DEBUG"
# "release" set flags: "-O3 -DDEBUG_PROFILER"
#

set(FLOW_BUILD_TYPE debug)


# you can override these settings through variable FLOW_CC_FLAGS
#
# Flow recognize  following definitions:
# Flow123d_NODEBUG					- all debug options off
# Flow123d_DEBUG					- all debug options on
# DEBUG_MESSAGES
# DEBUG_ASSERTS
# DEBUG_PROFILER
# DEBUG_FUNCTION_STACK
# HAVE_CXX11				- support for requested C++11 features (constexpr)
#
# example:
#set(FLOW_CC_FLAGS "-O3 -DFlow123d_NODEBUG -pg")



### External Projects directory ##########################################################
#
# The directory where possible external projects should be stored and built.
# The default location is ${PROJECT_SOURCE_DIR}/external_projects.

#set(EXTERNAL_PROJECT_DIR "") 