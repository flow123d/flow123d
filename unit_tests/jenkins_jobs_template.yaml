

#########################################################################################
# Projects - Jenkins Jobs Builder way to generate templated jobs
#########################################################################################

- defaults:
    name: flow123d-build
    # default template fields
    node: "{platform}"
    workspace: "F123-{platform}-{build-type}"
    properties:    
        - build-discarder:
            days-to-keep: 200
            num-to-keep: 200
            #artifact-days-to-keep: 
            #artifact-num-to-keep:    
    #logrotate: 
    #  daysToKeep: 200
    wrappers:
      - build-name:
          name:  "${{PROPFILE,file=\"prop.file\",property=\"BUILD_NAME\"}}  #${{BUILD_NUMBER}}"


# Multijob  project - debug
- project:
    name: "Multijob project debug"
    platform: linux
    build-type: debug
    unit-dir: 
      - $PLACEHOLDER_unit_list$
    test-dir:
      - $PLACEHOLDER_test_list$
    
    jobs:
      - "Flow123d-{platform}-{build-type}-configure"
      - "Flow123d-{platform}-{build-type}-build-libs"
      - "Flow123d-{platform}-{build-type}-unit-test-{unit-dir}"
      - "Flow123d-{platform}-{build-type}-build"
      - "Flow123d-{platform}-{build-type}-test-{test-dir}"
      - "Flow123d-{platform}-{build-type}-make-doc"
      - "Flow123d-{platform}-debug-multijob"


# Multijob  project - release
- project:
    name: "Multijob project release"
    platform: [ linux, windows, windows32 ]
    build-type: release
    unit-dir: 
      - $PLACEHOLDER_unit_list$
    test-dir:
      - $PLACEHOLDER_test_list$
    
    jobs:
      - "Flow123d-{platform}-{build-type}-configure"
      - "Flow123d-{platform}-{build-type}-make-doc"
      - "Flow123d-{platform}-{build-type}-build-libs"
      - "Flow123d-{platform}-{build-type}-unit-test-{unit-dir}"
      - "Flow123d-{platform}-{build-type}-build"
      - "Flow123d-{platform}-{build-type}-test-{test-dir}"
      - "Flow123d-{platform}-packages"
      - "Flow123d-{platform}-release-multijob"
      


#########################################################################################
# Single Job Templates
#########################################################################################



####################################################################
# Flow123d configure 
- job-template:
    name: "Flow123d-{platform}-{build-type}-configure"
    display-name: "{platform} {build-type} / configure "
    defaults: flow123d-build
    builders:
      - shell: |
          # configure
          echo "PATH: $PATH"
          export PATH=/opt/rh/devtoolset-2/root/usr/bin:$PATH
          cd flow123d
          cp config/config-jenkins-{platform}-{build-type}.cmake ./config.cmake
          make cmake


####################################################################
# Flow123d make doc + publish
- job-template:
    name: "Flow123d-{platform}-{build-type}-make-doc"
    display-name: "{platform} {build-type} / make doc"
    defaults: flow123d-build
    builders:
      - shell: |
          cd flow123d
          make html-doc || echo "No such step in makefile"
          make ref-doc
          make doxy-doc
#    publishers:
#      - cifs: 
#          site: 'bacula'
#          target: 'jan.brezina/public_html/flow123d_doc'
#          source: 'build-master/doc/reference_manual/flow123d_doc.pdf'
#          remove-prefix: 'build-master/doc/reference_manual/'
#      - cifs: 
#          site: 'bacula'
#          target: 'jan.brezina/public_html/flow123d_doc/source_doc'
#          source: 'build-master/doc/online-doc/flow123d/*'
#          remove-prefix: 'build-master/doc/online-doc/flow123d'
            


####################################################################
# Flow123d build libraries 
# - we need separate step for this since unit tests can run even if 
#   libraries do not build well
# - on other hand we want to prevent parallel build of same files if 
#   Jenkins execute run tests in parallel
# - we can still get this parallel problem when some library do not build
#   and two unit tests try to rebuild it
# - ultimate solution may be: do not have independent jobs for individual unit tests
#   just present generated XML files and use parallel make to make all unit tests and libraries
#   
- job-template:
    name: "Flow123d-{platform}-{build-type}-build-libs"
    display-name: "{platform} {build-type} / build libraries "
    defaults: flow123d-build
    builders:
      - shell: |
          # build all common sources for unit tests
          cd flow123d
          make -j 4 all
          make -j 4 -C build_tree/unit_tests gtest_mpi_obj         

#    publishers:
#      -github-notifier       

##################################################################
# Unit test for given directory
- job-template:
    name: "Flow123d-{platform}-{build-type}-unit-test-{unit-dir}"
    display-name: "{platform} {build-type} / unit-test / {unit-dir}"
    defaults: flow123d-build
    properties:
      # Limit number of concurrently running unit tests to 2
      - throttle:
          max-per-node: 2
          option: "category"
          categories:
            - "Flow123d-category-unit-tests"
    builders:
      - shell: |
          make -C flow123d/build_tree/unit_tests/{unit-dir} -k all-test


##################################################################
# Unit tests benchmarks for given directory     (NOT USED YET)        
- job-template:
    name: "Flow123d-{platform}-{build-type}-unit-benchmark-{unit-dir}"
    display-name: "{platform} {build-type} / unit-bench / {unit-dir}"
    defaults: flow123d-build
    builders:
      - shell: |
          make -C flow123d/build_tree/unit_tests/{unit-dir} -k all-tests


####################################################################
# Flow123d build main binary
- job-template:
    name: "Flow123d-{platform}-{build-type}-build"
    display-name: "{platform} {build-type} / flow123d build "
    defaults: flow123d-build
    builders:
      - shell: |
          # configure
          cd flow123d
          make all

        
#################################################################
# Integration test for given directory
- job-template:
    name: "Flow123d-{platform}-{build-type}-test-{test-dir}"
    display-name: "{platform} {build-type} / test / {test-dir}"
    defaults: flow123d-build
    properties:
      # Limit number of concurrently running integration tests to 2
      - throttle:
          max-per-node: 2
          option: "category"
          categories:
            - Flow123d-category-integration-tests

    builders:
      - shell: |
          make -C flow123d/tests/{test-dir} test-all
        
#################################################################
# Packaging and publish
# Use -i option for make to ignore errors comming from NSIS call.
- job-template:
    name: "Flow123d-{platform}-packages"
    display-name: "{platform} / make packages"
    defaults: flow123d-build
    builders:
      - shell: |
          make -C flow123d clean-tests
          cd flow123d/build_tree
          rm -rf _CPack_Packages
          pwd
          ls
          make -i package_debug
          make post_package
          rm -rf _CPack_Packages
          pwd
          ls
          make package_source
      - shell: |
          cd flow123d
          bin/prepare_to_publish.sh
      - inject:
          properties-file: prop.file
    publishers:
      - cifs: 
          site: 'flow123d@intec'
          target: '/packages/'
          source: build-${{GIT_BRANCH}}/publish_dir/**/*
          remove-prefix: build-${{GIT_BRANCH}}/publish_dir



#########################################################################################
# Multijob Job Templates
#########################################################################################


########################################################################
# Main multijob -debug
#
# possible values for condition: {SUCCESSFUL, UNSTABLE, COMPLETED}
- job-template:
    name: "Flow123d-{platform}-debug-multijob"
    display-name: "{platform} debug / Flow123d multijob"
    project-type: multijob
    defaults: flow123d-build

    block-downstream: yes
    scm:
      - git:
          url: https://github.com/flow123d/flow123d.git
          basedir: flow123d     # workspace/flow123d
          browser: githubweb
          browser-url: https://github.com/flow123d/flow123d/
          skip-tag: true

    triggers: 
      - github
    wrappers:

## cleanup after build       
#      - workspace-cleanup:
#          dirmatch: true
#          include:
#            - "flow123d"
#            - "build-*"

      # injection doesn't work under cygwin; see other solution for release multijob
      - inject:
          script-content: 
            "echo \"BUILD_NAME=${{GIT_BRANCH#origin/}}@${{GIT_COMMIT:0:6}}\" >prop.file"

      # set build name different way to have it even at start of the job
      - build-name:
          name:  "${{GIT_BRANCH}}@${{GIT_REVISION, length=6}} #${{BUILD_NUMBER}}"
    builders:
      - shell: |
          # remove all build directories safe the latest five
          rm -rf `ls -dt ./build-* |tail -n +6 `
          cd flow123d
          git checkout ${{GIT_BRANCH##origin/}}
          make clean-all                
      - multijob:
          name: "Configure Phase"
          condition: SUCCESSFUL
          projects:  
            - name: "Flow123d-{platform}-debug-configure"
      - multijob:
          name: "Build Flow123d libraries"
          condition: COMPLETED
          projects:
            - name: "Flow123d-{platform}-debug-build-libs"
      - multijob:
          name: "Unit tests"
          condition: COMPLETED
          projects:     #*UNIT-JOBS
            - name: "Flow123d-{platform}-debug-unit-test-$PLACEHOLDER_unit_list$"
      - multijob:
          name: "Build Flow123d"
          condition: SUCCESSFUL
          projects:
            - name: "Flow123d-{platform}-debug-build"
      - multijob:
          name: "Integration tests"
          condition: COMPLETED
          projects:
            - { name: "Flow123d-{platform}-debug-test-$PLACEHOLDER_test_list$", kill-phase-on: NEVER }
      - multijob:
          name: "Make Docs"
          condition: COMPLETED
          projects:
            - name: "Flow123d-{platform}-debug-make-doc"
            


########################################################################
# Main multijob - release
#
# possible values for condition: {SUCCESSFUL, UNSTABLE, COMPLETED}
- job-template:
    name: "Flow123d-{platform}-release-multijob"
    display-name: "{platform} release / Flow123d multijob"
    project-type: multijob
    defaults: flow123d-build
    
    block-downstream: yes
    scm:
      - git:
          url: https://github.com/flow123d/flow123d.git
          basedir: flow123d     # workspace/flow123d
          browser: githubweb
          browser-url: https://github.com/flow123d/flow123d/
          wipe-workspace: yes
          skip-tag: true
          branches:
            - master
            - 1.8.2
            - 1.8.4
            - 2.0.0_rc
            - JHY_continuous_package_testing
    triggers:
      # run every day around 3 AM even if there is no change in code
      - timed: "H 3 * * *"
      #- github
    wrappers:
      - build-name:
          name:  "${{GIT_BRANCH}}@${{GIT_REVISION, length=6}} #${{BUILD_NUMBER}}"
    builders:
      # escaping quotas and double braces are due to YAML format
#      - shell: "echo \"BUILD_NAME=${{GIT_BRANCH##origin/}}@${{GIT_COMMIT:0:6}}\" >prop.file; rm -rf build-* external_projects; cd flow123d; git checkout ${{GIT_BRANCH##origin/}}"               
#      - shell: "echo \"BUILD_NAME=${{GIT_BRANCH##origin/}}@${{GIT_COMMIT:0:6}}\" >prop.file; rm -rf build-*; cd flow123d; git checkout ${{GIT_BRANCH##origin/}}"               
      - shell: |
          echo "BUILD_NAME=${{GIT_BRANCH##origin/}}@${{GIT_COMMIT:0:6}}" >prop.file
          echo "GIT_BRANCH=${{GIT_BRANCH##origin/}}" >>prop.file
          rm -rf build-*
          cd flow123d
          git checkout ${{GIT_BRANCH##origin/}}
      - multijob:
          name: "Configure Phase"
          condition: SUCCESSFUL
          projects:  
            - name: "Flow123d-{platform}-release-configure"
      - multijob:
          name: "Build Flow123d libraries"
          condition: COMPLETED
          projects:
            - name: "Flow123d-{platform}-release-build-libs"
      - multijob:
          name: "Unit tests"
          condition: COMPLETED
          projects:     #*UNIT-JOBS
            - name: "Flow123d-{platform}-release-unit-test-$PLACEHOLDER_unit_list$"
      - multijob:
          name: "Build Flow123d"
          condition: SUCCESSFUL
          projects:
            - name: "Flow123d-{platform}-release-build"
      - multijob:
          name: "Integration tests"
          condition: COMPLETED
          projects:
            - name: "Flow123d-{platform}-release-test-$PLACEHOLDER_test_list$"
      - multijob:
          name: "Make Docs"
          condition: COMPLETED
          projects:
            - name: "Flow123d-{platform}-release-make-doc"
      - multijob:
          name: "Pack and Install"
          condition: COMPLETED
          projects:
            - name: "Flow123d-{platform}-packages"

######
# Coverage with coberture
# - install cobertura plugin
# - build with gcc options:    -fprofile-arcs -ftest-coverage
# - link with: -lgcov
#   .. separate build for unit tests with separate config.cmake ??
# - shell script:
# make clean
# make all
# ./coverage --gtest_output=xml:coverage.junit.xml
# chmod u+x gcovr
# ./gcovr -x -r .. -e ".+\.test\.cpp*" > coverage.xml
#
# - publish JUnit results
# - publis coverture report



##################################333
# Modules      

#    triggers:
#      - github
      #
      # - timed: "H * * * *"
      #
      # Needs: BuildResultTrigger plugin, 
      # advantage over default mechanism: monitored jobs do not know about trigger
      # - build-result: 
      #   - jobs:  # jobs to monitor
      #   - results:

#    wrappers:
#      - build-name:
#          name:  "$GIT_BRANCH #$BUILD_NUMBER"
      # This may be useful for large data benchmarks.
      # We can not store large data in repository, but can copy them from 
      # Jenkins master, possibly download them first, e.g. from bacula.
      # needs Copy To Slave Plugin
      #- copy-to-slave:
      #

#    publishers:
      # - cifs: 
      # - email-ext:
      # - html-publisher:
      # - junit
      # - logparser: !!!
      # - performance: 
      # - pipeline: 
      # - plot:




####################################################################
# Multijob  project - (coveragetest)
#
# To each source code file will be created 3 additional helper files
#  1) upon compilation are created *.gcno files
#       - contains additional information about file
#  2) when source code file is used for the first time *.gcda files are created
#       - contains information about calling and execution of the file
#  3) after collection of coverage are *.gcov files created
#       - contains source code with additional coverage information:
#         line number and line hit (how many times was line executed) and some additional information

- project:
    name: "Multijob project coveragetest"
    platform: linux
    build-type: coveragetest
    unit-dir: 
      - $PLACEHOLDER_unit_list$
    test-dir:
      - $PLACEHOLDER_test_list$
    jobs:
      - "Flow123d-{platform}-coveragetest-configure"
      - "Flow123d-{platform}-coveragetest-unit-test-{unit-dir}"
      - "Flow123d-{platform}-coveragetest-coverage-unit-test"
      - "Flow123d-{platform}-coveragetest-test-{test-dir}"
      - "Flow123d-{platform}-coveragetest-coverage-test"
      - "Flow123d-{platform}-coveragetest-multijob"


####################################################################
# Flow123d configure (coveragetest)
- job-template:
    name: "Flow123d-{platform}-coveragetest-configure"
    display-name: "{platform} coveragetest / configure "
    workspace: "F123-{platform}-coveragetest"
    defaults: flow123d-build
    builders:
      - shell: |
          # configure
          cd flow123d
          cp config/config-jenkins-linux-coverage.cmake ./config.cmake
          make -j 4 all


##################################################################
# Unit test for given directory (coveragetest)
- job-template:
    name: "Flow123d-{platform}-coveragetest-unit-test-{unit-dir}"
    display-name: "{platform} Unit test / {unit-dir}"
    workspace: "F123-{platform}-coveragetest"
    defaults: flow123d-build
    properties:
      - throttle:
          option: "category"
          max-total: 1
          max-per-node: 1
          categories:
            - coverage
    builders:
      - shell: |
          # run test and generate coverage.xml and delete old files
          make -C flow123d/build_tree/unit_tests/{unit-dir} -k all-test
          make -C flow123d/build_tree/ cobertura-collect-coverage
          # keep original coverage for overall results and create one copy for package filtering
          cp flow123d/build_tree/coverage.xml flow123d/build_tree/coverage-unit-test-{unit-dir}.cobertura
          cp flow123d/build_tree/coverage.xml flow123d/build_tree/coverage-unit-test-{unit-dir}.xml
          # remove coverage file 
          rm -f flow123d/build_tree/coverage.xml
          # delete gcda files and gcov files BUT keep gcno files to reset coverage
          # can't delete gcno files, otherwise we would have to recompile entire flow
          find . -name *.gcda -type f -delete
          find . -name *.gcov -type f -delete
          # filter out only current package
          python -u flow123d/bin/python/merge-xml-coverage.py -f -k src.{unit-dir} -k src.{unit-dir}.* flow123d/build_tree/coverage-unit-test-{unit-dir}.cobertura

    publishers:
      - cobertura:
           report-file: "**/flow123d/build_tree/coverage-unit-test-{unit-dir}.cobertura"
           only-stable: "false"
           fail-no-reports: "true"
           fail-unhealthy: "false"
           fail-unstable: "false"
           health-auto-update: "false"
           stability-auto-update: "false"
           zoom-coverage-chart: "false"
           source-encoding: "ASCII"
           targets:
                - files:
                    healthy: 95
                    unhealthy: 60
                    failing: 30
                - method:
                    healthy: 90
                    unhealthy: 60
                    failing: 30
                - line:
                    healthy: 70
                    unhealthy: 60
                    failing: 50



#################################################################
# Unit test collection coverage (coveragetest)
- job-template:
    name: "Flow123d-{platform}-coveragetest-coverage-unit-test"
    display-name: "{platform} Unit tests"
    defaults: flow123d-build
    builders:
      - shell: |
          # merge unit test xml files in specified directory
          python -u flow123d/bin/python/merge-xml-coverage.py -p flow123d/build_tree/ -o coverage-unit-test.cobertura
          # create filtered copy of src package only
          python -u flow123d/bin/python/merge-xml-coverage.py -p flow123d/build_tree/ -f -k src.* -k src -s .filtered coverage-unit-test.cobertura
          # remove old xml files 
          cd flow123d/build_tree/
          rm -f *.xml

    publishers:
      - cobertura:
           report-file: "**/flow123d/build_tree/coverage-unit-test.cobertura.filtered"
           only-stable: "false"
           fail-no-reports: "true"
           fail-unhealthy: "false"
           fail-unstable: "false"
           health-auto-update: "false"
           stability-auto-update: "false"
           zoom-coverage-chart: "false"
           source-encoding: "ASCII"
           targets:
                - files:
                    healthy: 95
                    unhealthy: 60
                    failing: 30
                - method:
                    healthy: 90
                    unhealthy: 60
                    failing: 30
                - line:
                    healthy: 70
                    unhealthy: 60
                    failing: 50



#################################################################
# Integration test for given directory (coveragetest)
- job-template:
    name: "Flow123d-{platform}-coveragetest-test-{test-dir}"
    display-name: "{platform} Integration test / {test-dir}"
    defaults: flow123d-build
    disabled: false
    properties:
      - throttle:
          option: "category"
          max-total: 1
          max-per-node: 1
          categories:
            - coverage
    builders:
      - shell: |
          # run test and generate coverage.xml and delete old files
          make -C flow123d/tests/{test-dir} -k test-all 
          make -C flow123d/build_tree/ cobertura-collect-coverage
          # keep original coverage for overall results and create one copy for package filtering
          cp flow123d/build_tree/coverage.xml flow123d/build_tree/coverage-test-{test-dir}.cobertura
          cp flow123d/build_tree/coverage.xml flow123d/build_tree/coverage-test-{test-dir}.xml
          # remove coverage file 
          rm -f flow123d/build_tree/coverage.xml
          # delete gcda files and gcov files BUT keep gcno files to reset coverage
          # can't delete gcno files, otherwise we would have to recompile entire flow
          find . -name *.gcda -type f -delete
          find . -name *.gcov -type f -delete
          # integration tests dont test specific package so we can't filter results

    publishers:
      - cobertura:
           report-file: "**/flow123d/build_tree/coverage-test-{test-dir}.cobertura"
           only-stable: "false"
           fail-no-reports: "true"
           fail-unhealthy: "false"
           fail-unstable: "false"
           health-auto-update: "false"
           stability-auto-update: "false"
           zoom-coverage-chart: "false"
           source-encoding: "ASCII"
           targets:
                - files:
                    healthy: 95
                    unhealthy: 60
                    failing: 30
                - method:
                    healthy: 90
                    unhealthy: 60
                    failing: 30
                - line:
                    healthy: 70
                    unhealthy: 60
                    failing: 50



#################################################################
# Integration test collection coverage (coveragetest)
- job-template:
    name: "Flow123d-{platform}-coveragetest-coverage-test"
    display-name: "{platform} Integration tests"
    defaults: flow123d-build
    disabled: false
    builders:
      - shell: |
          # merge integration test xml files
          python -u flow123d/bin/python/merge-xml-coverage.py -p flow123d/build_tree/ -o coverage-test.cobertura
          # create filtered copy of src package only
          python -u flow123d/bin/python/merge-xml-coverage.py -p flow123d/build_tree/ -f -k src.* -k src --suffix .filtered coverage-test.cobertura
          # remove old xml files 
          cd flow123d/build_tree/
          rm -f *.xml

    publishers:
      - cobertura:
           report-file: "**/flow123d/build_tree/coverage-test.cobertura.filtered"
           only-stable: "false"
           fail-no-reports: "true"
           fail-unhealthy: "false"
           fail-unstable: "false"
           health-auto-update: "false"
           stability-auto-update: "false"
           zoom-coverage-chart: "false"
           source-encoding: "ASCII"
           targets:
                - files:
                    healthy: 95
                    unhealthy: 60
                    failing: 30
                - method:
                    healthy: 90
                    unhealthy: 60
                    failing: 30
                - line:
                    healthy: 70
                    unhealthy: 60
                    failing: 50




########################################################################
# Main multijob - coveragetest
#
# possible values for condition: {SUCCESSFUL, UNSTABLE, COMPLETED}
- job-template:
    name: "Flow123d-{platform}-coveragetest-multijob"
    display-name: "{platform} coveragetest / Flow123d multijob"
    workspace: "F123-{platform}-coveragetest"
    project-type: multijob
    defaults: flow123d-build

    block-downstream: yes
    scm:
      - git:
          url: https://github.com/flow123d/flow123d.git
          basedir: flow123d     # workspace/flow123d
          browser: githubweb
          browser-url: https://github.com/flow123d/flow123d/
          skip-tag: true
          branches: 
            - master

    triggers: 
      # run every week around 4 AM even if there is no change in code
      - timed: "H 4  * * H"
    wrappers:

      # injection doesn't work under cygwin; see other solution for release multijob
      - inject:
          script-content: 
            "echo \"BUILD_NAME=${{GIT_BRANCH#origin/}}@${{GIT_COMMIT:0:6}}\" >prop.file"

      # set build name different way to have it even at start of the job
      - build-name:
          name:  "${{GIT_BRANCH}}@${{GIT_REVISION, length=6}} #${{BUILD_NUMBER}}"
    builders:
      - shell: "rm -rf build-*; cd flow123d; git checkout ${{GIT_BRANCH##origin/}}"
      - trigger-builds: 
        - { project: "Flow123d-{platform}-coveragetest-configure", block: true }
        - { project: "Flow123d-{platform}-coveragetest-unit-test-$PLACEHOLDER_unit_list$", block: true }
        - { project: "Flow123d-{platform}-coveragetest-coverage-unit-test", block: true }
        - { project: "Flow123d-{platform}-coveragetest-test-$PLACEHOLDER_test_list$", block: true }
        - { project: "Flow123d-{platform}-coveragetest-coverage-test", block: true }
      - shell: |
          python -u flow123d/bin/python/merge-xml-coverage.py -p flow123d/build_tree/ -o coverage-all.cobertura coverage-test.cobertura coverage-unit-test.cobertura
          cd flow123d/build_tree/
          rm -f *.xml
          cp coverage-all.cobertura coverage-all.xml


    publishers:
      - cobertura:
           report-file: "**/flow123d/build_tree/coverage-all.xml"
           only-stable: "false"
           fail-no-reports: "true"
           fail-unhealthy: "false"
           fail-unstable: "false"
           health-auto-update: "false"
           stability-auto-update: "false"
           zoom-coverage-chart: "false"
           source-encoding: "ASCII"
           targets:
                - files:
                    healthy: 95
                    unhealthy: 60
                    failing: 30
                - method:
                    healthy: 90
                    unhealthy: 60
                    failing: 30
                - line:
                    healthy: 70
                    unhealthy: 60
                    failing: 50


      # - description-setter:
      #      regexp: "POST-CHECKOUT\((.*) -> (.+)\):|BUILD_NAME=(.+)@.*"
      #      regexp-for-failed: "POST-CHECKOUT\((.*) -> (.+)\):|BUILD_NAME=(.+)@.*"
      #      description: "\1\2"
      #      description-for-failed: "\1\2"
      #      set-for-matrix: true
      #             - name: "Flow123d-{platform}-coveragetest-test-$PLACEHOLDER_test_list$"
      # - logparser:
      #     parse-rules: "/home/builder/jenkins/F123-linux-coveragetest/rules.txt"
      #     unstable-on-warning: true
      #     fail-on-error: true




####################################################################
# Multijob  project - (windows package tests)
#
# Simple multijob which test whether are packed installators functional
#   Testing consist of 5 steps:
#      1) download  - download and save zip file from server (http://flow.nti.tul.cz/packages/ by default)
#      2) install   - run NSIS silent (console only) instalation
#      3) run       - run binary flow123d using absolute path of flow123d binary
#      4) python    - run simple test (03 - flow_implicit), checks profiler report generation
#                       AND mainly test embedded Python for report convertion to txt file
#      5) uninstall - run NSIS silent uninstall and remove remaining files

- defaults:
    name: flow123d-windows-package-test
    # default template fields
    node: windows_packages
    workspace: c:\package_tests\
    logrotate: 
      daysToKeep: 200

- project:
    name: "Windows package tests"
    action: [ "download,install", run, python_test, uninstall ]
    arch: [ 32, 64 ]
    jobs:
      - "Windows-{arch}-package-{action}"
      - "Windows-{arch}-package-all"

#################################################################
# template for single testing step (install, uninstall, ...)
- job-template:
    name: "Windows-{arch}-package-{action}"
    display-name: "Windows {arch} package - {action}"
    defaults: flow123d-windows-package-test
    builders:
      - batch: |
          python package.py -a {arch} -m {action} --version %GIT_BRANCH%


########################################################################
# Main multijob - release
#
# possible values for condition: {SUCCESSFUL, UNSTABLE, COMPLETED, FAILURE}
- job-template:
    name: "Windows-{arch}-package-all"
    display-name: "Windows {arch} package multijob"
    defaults: flow123d-windows-package-test
    scm:
      - git:
          remotes:
             - origin: 
                 url: https://github.com/flow123d/flow123d.git
             - packages: 
                 url: https://github.com/x3mSpeedy/Flow123d-package-test.git
          branches:
            - origin/master
            - origin/JHY_continuous_package_testing
    triggers: 
      # run every day around 5 AM even if there is no change in code
      - timed: "H 5  * * *"
    project-type: multijob
    builders:
      - batch: |
            rd /s /q windows_x86_{arch}
            git checkout -f packages/master
      - multijob:
          condition: COMPLETED
          name: 'Install'
          projects:
            - name: "Windows-{arch}-package-download,install"
              condition: COMPLETED
              predefined-parameters: GIT_BRANCH=$GIT_BRANCH
      - multijob:
          condition: COMPLETED
          name: 'Run test'
          projects:
            - name: "Windows-{arch}-package-run"
              condition: COMPLETED
              predefined-parameters: GIT_BRANCH=$GIT_BRANCH
      - multijob:
          condition: COMPLETED
          name: 'Python test'
          projects:
            - name: "Windows-{arch}-package-python_test"
              condition: COMPLETED
              predefined-parameters: GIT_BRANCH=$GIT_BRANCH
      - multijob:
          condition: COMPLETED
          name: 'Uninstall'
          projects:
            - name: "Windows-{arch}-package-uninstall"
              condition: COMPLETED
              predefined-parameters: GIT_BRANCH=$GIT_BRANCH



####################################################################
# Multijob  project - (Linux package tests)
#
# Simple multijob which test whether are packed installators functional
#   Testing consist of 4 steps:
#      1) download  - download and save tar.gz file from server (http://flow.nti.tul.cz/packages/ by default)
#      2) install   - untar tarball
#      3) run       - run binary flow123d using absolute path of flow123d binary
#      4) python    - run simple test (03 - flow_implicit), checks profiler report generation
#                       AND mainly test embedded Python for report convertion to txt file
#      5) uninstall - rm -rf install location

- defaults:
    name: flow123d-linux-package-test
    # default template fields
    node: linux_packages
    workspace: F123-linux-packages
    logrotate: 
      daysToKeep: 200


      
- project:
    name: "Linux package tests"
    action: [ "download,install", run, python_test, uninstall ]
    arch: [ 64 ]
    jobs:
      - "Linux-{arch}-package-{action}"
      - "Linux-{arch}-package-all"

#################################################################
# template for single testing step (install, uninstall, ...)
- job-template:
    name: "Linux-{arch}-package-{action}"
    display-name: "Linux {arch} package - {action}"
    defaults: flow123d-linux-package-test
    triggers: 
      # run every day around 5 AM even if there is no change in code
      - timed: "H 5  * * *"
    properties:
      - throttle:
          max-per-node: 1
          max-total: 1
          option: project
    builders:
      - shell: |
          python package.py -a {arch} -m {action} --version $GIT_BRANCH


########################################################################
# Main multijob - release
#
# possible values for condition: {SUCCESSFUL, UNSTABLE, COMPLETED, FAILURE}
- job-template:
    name: "Linux-{arch}-package-all"
    display-name: "Linux {arch} package multijob"
    defaults: flow123d-linux-package-test
    scm:
      - git:
          remotes:
             - origin: 
                 url: https://github.com/flow123d/flow123d.git
             - packages: 
                 url: https://github.com/x3mSpeedy/Flow123d-package-test.git
          branches:
            - origin/master
            - origin/JHY_continuous_package_testing
    project-type: multijob
    builders:
      - shell: |
            # remove previous package
            rm -rf linux_x86_{arch}
            # checkout to repo
            git checkout -f packages/master
      - multijob:
          condition: COMPLETED
          name: 'Install'
          projects:
            - name: "Linux-{arch}-package-download,install"
              condition: COMPLETED
              predefined-parameters: GIT_BRANCH=$GIT_BRANCH
      - multijob:
          condition: COMPLETED
          name: 'Run test'
          projects:
            - name: "Linux-{arch}-package-run"
              condition: COMPLETED
              predefined-parameters: GIT_BRANCH=$GIT_BRANCH
      - multijob:
          condition: COMPLETED
          name: 'Python test'
          projects:
            - name: "Linux-{arch}-package-python_test"
              condition: COMPLETED
              predefined-parameters: GIT_BRANCH=$GIT_BRANCH
      - multijob:
          condition: COMPLETED
          name: 'Uninstall'
          projects:
            - name: "Linux-{arch}-package-uninstall"
              condition: COMPLETED
              predefined-parameters: GIT_BRANCH=$GIT_BRANCH